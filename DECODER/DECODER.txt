Inputs: instr[16];
Outputs: cToM, loadA, loadD, loadM, op1, op2[2], opCode[4], jmpIfZ, constant[15];

// 1. specify the components you want to use here
Parts: aMux MUX, dMux MUX, mMux MUX,
  not1 NOT, and1 AND, and2 AND, not2 NOT, and3 AND, jumpAnd AND, notJump NOT
;

// 2. wire them up
Wires:
  // depending on left most bit... 
  instr[16] -> aMux.sel, instr[16] -> dMux.sel, instr[16] -> mMux.sel,
  // op1, op2, opCode, constant
  instr[13] -> op1, instr[11:12] -> op2, instr[7:10] -> opCode, 
  instr[1:15] -> constant,
  // when instr[16] == 1
  instr[16] -> cToM, 1 -> mMux.in2,
  // when instr[16] == 0
  instr[14] -> and1.in1, instr[15] -> not1.in, not1.out -> and1.in2, 
  and1.out -> aMux.in1, // loadA = instr[14:15] == 01
  instr[14] -> not2.in, not2.out -> and2.in1, instr[15] -> and2.in2, 
  and2.out -> mMux.in1, // loadM = instr[14:15] == 10
  instr[14] -> and3.in1, instr[15] -> and3.in2, 
  and3.out -> dMux.in1, // loadD = instr[14:15] == 11
  instr[16] -> notJump.in, notJump.out -> jumpAnd.in1, instr[6] -> jumpAnd.in2,
  // write loads
  aMux.out -> loadA, mMux.out -> loadM, dMux.out -> loadD, jumpAnd.out -> jmpIfZ
;
