Inputs: instr[16], data[16], reset;
Outputs: write, dataAddr[16], instrAddr[16], result[16];


// 1. more devices are needed to implement behavior as described in specification
Parts:
  d DECODER, mr REGISTER16B, ar REGISTER16B, pc COUNTER16B, alu ALU16B,
  aluMux1 MUX16B, aluMux2 MUX4W16B, pcLoadAnd AND, mrMux MUX16B;

// 2. wire them up
Wires: 
  instr -> d.instr, // decode instructions
  // alu
  ar.out -> aluMux1.in1, d.constant[1:5] -> aluMux1.in2[1:5], 
  d.op1 -> aluMux1.sel, aluMux1.out -> alu.in1, // alu in 1
  d.constant[1:5] -> aluMux2.in1[1:5],
  ar.out -> aluMux2.in2, mr.out -> aluMux2.in3, data -> aluMux2.in4,
  d.op2 -> aluMux2.sel, aluMux2.out -> alu.in2, // alu in 2
  d.opCode -> alu.opCode, alu.out -> result,
  // AR
  alu.out -> ar.in, d.loadA -> ar.load,
  // MR
  alu.out -> mrMux.in1, d.constant -> mrMux.in2[1:15], 
  d.cToM -> mrMux.sel, mrMux.out -> mr.in,
  d.loadM -> mr.load, mr.out -> dataAddr,
  // PC
  mr.out -> pc.in, reset -> pc.reset, alu.zero -> pcLoadAnd.in1, 
  d.jmpIfZ -> pcLoadAnd.in2, pcLoadAnd.out -> pc.load, pc.out -> instrAddr,
  // loadD
  d.loadD -> write
;
