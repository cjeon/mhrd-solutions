Inputs: in1[4], in2[4], opCode[4];
Outputs: out[4], negative, zero;
// 1 : negate 1
// 2 : negate 2
// 3 : 0:add, 1:nand
// 4 : negate out
Parts: 
  n1 NOT4B, result1 MUX4B,
  n2 NOT4B, result2 MUX4B,
  a ADDER4B, n NAND4B, result3 MUX4B,
  n4 NOT4B, result4 MUX4B,
  
  o OR4W, zn NOT 
;

// 2. wire them up
Wires:
// opCode Binding  
  opCode[4] -> result1.sel, opCode[3] -> result2.sel, 
  opCode[2] -> result3.sel, opCode[1] -> result4.sel,

// compute
  in1 -> result1.in1, in1 -> n1.in, n1.out -> result1.in2,
  in2 -> result2.in1, in2 -> n2.in, n2.out -> result2.in2,
  result1.out -> a.in1, result2.out -> a.in2, a.out -> result3.in1,
  result1.out -> n.in1, result2.out -> n.in2, n.out -> result3.in2,
  result3.out -> result4.in1, result3.out -> n4.in, n4.out -> result4.in2,

// write
  result4.out -> out,
  result4.out[4] -> negative,
  result4.out -> o.in, o.out -> zn.in, zn.out -> zero  
;
